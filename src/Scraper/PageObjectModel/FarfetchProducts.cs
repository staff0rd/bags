// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using coach_bags_selenium.Farfetch;
//
//    var farfetchProduct = FarfetchProduct.FromJson(jsonString);

namespace coach_bags_selenium.Farfetch
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class FarfetchProducts
    {
        [JsonProperty("facetCount")]
        public FacetCount FacetCount { get; set; }

        [JsonProperty("totalPages")]
        public long TotalPages { get; set; }

        [JsonProperty("totalItems")]
        public long TotalItems { get; set; }

        [JsonProperty("formattedTotalItems")]
        public string FormattedTotalItems { get; set; }

        [JsonProperty("selectedScale")]
        public long SelectedScale { get; set; }

        [JsonProperty("scales")]
        public object Scales { get; set; }

        [JsonProperty("moreProducts")]
        public object MoreProducts { get; set; }

        [JsonProperty("priceInfo")]
        public FarfetchProductPriceInfo PriceInfo { get; set; }

        [JsonProperty("listingItems")]
        public ListingItems ListingItems { get; set; }

        [JsonProperty("listingPagination")]
        public ListingPagination ListingPagination { get; set; }
    }

    public partial class FacetCount
    {
        [JsonProperty("designer")]
        public Dictionary<string, long> Designer { get; set; }

        [JsonProperty("attributes")]
        public Dictionary<string, long> Attributes { get; set; }

        [JsonProperty("category")]
        public Dictionary<string, long> Category { get; set; }

        [JsonProperty("colour")]
        public Dictionary<string, long> Colour { get; set; }

        [JsonProperty("discount")]
        public Dictionary<string, long> Discount { get; set; }

        [JsonProperty("size")]
        public Dictionary<string, long> Size { get; set; }

        [JsonProperty("location")]
        public Dictionary<string, long> Location { get; set; }

        [JsonProperty("newSeason")]
        public NewSeason NewSeason { get; set; }

        [JsonProperty("labels")]
        public Labels Labels { get; set; }
    }

    public partial class Labels
    {
        [JsonProperty("1300")]
        public long The1300 { get; set; }
    }

    public partial class NewSeason
    {
        [JsonProperty("2303")]
        public long The2303 { get; set; }
    }

    public partial class ListingItems
    {
        [JsonProperty("items")]
        public Item[] Items { get; set; }
    }

    public partial class Item
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("shortDescription")]
        public string ShortDescription { get; set; }

        [JsonProperty("merchantId")]
        public long MerchantId { get; set; }

        [JsonProperty("brand")]
        public Brand Brand { get; set; }

        [JsonProperty("gender")]
        public string Gender { get; set; }

        [JsonProperty("images")]
        public Images Images { get; set; }

        [JsonProperty("priceInfo")]
        public ItemPriceInfo PriceInfo { get; set; }

        [JsonProperty("merchandiseLabel")]
        public string MerchandiseLabel { get; set; }

        [JsonProperty("merchandiseLabelField")]
        public string MerchandiseLabelField { get; set; }

        [JsonProperty("isCustomizable")]
        public bool IsCustomizable { get; set; }

        [JsonProperty("availableSizes")]
        public AvailableSize[] AvailableSizes { get; set; }

        [JsonProperty("stockTotal")]
        public long StockTotal { get; set; }

        [JsonProperty("hasSimilarProducts")]
        public bool HasSimilarProducts { get; set; }

        [JsonProperty("url")]
        public string Url { get; set; }

        [JsonProperty("heroProductType")]
        public object HeroProductType { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("properties")]
        public Properties Properties { get; set; }
        
        public Data.Product ToEntity(Data.Category category) => new Data.Product
        {
            Brand = Brand.Name,
            Category = category,
            Id = Id.ToString(),
            Image = Images.CutOut.ToString(),
            Link = Url,
            Name = ShortDescription,
            Price = PriceInfo.InitialPrice,
            SalePrice = PriceInfo.FinalPrice,
            Savings = PriceInfo.InitialPrice - PriceInfo.FinalPrice,
        };
    }

    public partial class AvailableSize
    {
        [JsonProperty("scaleId")]
        public long ScaleId { get; set; }

        [JsonProperty("size")]
        public string Size { get; set; }
    }

    public partial class Brand
    {
        [JsonProperty("id")]
        public long Id { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }
    }

    public partial class Images
    {
        [JsonProperty("cutOut")]
        public Uri CutOut { get; set; }

        [JsonProperty("model")]
        public Uri Model { get; set; }

        [JsonProperty("all")]
        public object All { get; set; }
    }

    public partial class ItemPriceInfo
    {
        [JsonProperty("formattedFinalPrice")]
        public string FormattedFinalPrice { get; set; }

        [JsonProperty("formattedInitialPrice")]
        public string FormattedInitialPrice { get; set; }

        [JsonProperty("finalPrice")]
        public long FinalPrice { get; set; }

        [JsonProperty("initialPrice")]
        public long InitialPrice { get; set; }

        [JsonProperty("currencyCode")]
        public string CurrencyCode { get; set; }

        [JsonProperty("isOnSale")]
        public bool IsOnSale { get; set; }

        [JsonProperty("discountLabel")]
        public string DiscountLabel { get; set; }

        [JsonProperty("installmentsLabel")]
        public object InstallmentsLabel { get; set; }
    }

    public partial class Properties
    {
        [JsonProperty("isLimoncello", NullValueHandling = NullValueHandling.Ignore)]
        public long? IsLimoncello { get; set; }
    }

    public partial class ListingPagination
    {
        [JsonProperty("index")]
        public long Index { get; set; }

        [JsonProperty("view")]
        public long View { get; set; }

        [JsonProperty("firstView")]
        public long FirstView { get; set; }

        [JsonProperty("desktopView")]
        public long DesktopView { get; set; }

        [JsonProperty("totalItems")]
        public long TotalItems { get; set; }

        [JsonProperty("totalPages")]
        public long TotalPages { get; set; }

        [JsonProperty("normalizedTotalItems")]
        public string NormalizedTotalItems { get; set; }
    }

    public partial class FarfetchProductPriceInfo
    {
        [JsonProperty("max")]
        public long Max { get; set; }

        [JsonProperty("maxBoundary")]
        public long MaxBoundary { get; set; }

        [JsonProperty("minBoundary")]
        public long MinBoundary { get; set; }

        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("filter")]
        public object Filter { get; set; }
    }

    public partial class FarfetchProducts
    {
        public static FarfetchProducts FromJson(string json) => JsonConvert.DeserializeObject<FarfetchProducts>(json, coach_bags_selenium.Farfetch.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this FarfetchProducts self) => JsonConvert.SerializeObject(self, coach_bags_selenium.Farfetch.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
