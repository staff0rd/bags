// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using coach_bags_selenium.Outnet;
//
//    var outnetProduct = OutnetProduct.FromJson(jsonString);

namespace coach_bags_selenium.Outnet
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using System.Linq;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class OutnetProduct
    {
        [JsonProperty("dynamic")]
        public bool Dynamic { get; set; }

        [JsonProperty("productColours")]
        public ProductColour[] ProductColours { get; set; }

        [JsonProperty("visible")]
        public bool Visible { get; set; }

        [JsonProperty("masterCategory")]
        public MasterCategory MasterCategory { get; set; }

        [JsonProperty("designerNameEN")]
        public string DesignerNameEn { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("productId")]
        public string ProductId { get; set; }

        [JsonProperty("badges", NullValueHandling = NullValueHandling.Ignore)]
        public Badge[] Badges { get; set; }

        [JsonProperty("price")]
        public OutnetProductPrice Price { get; set; }

        [JsonProperty("thumbnail")]
        public string Thumbnail { get; set; }

        [JsonProperty("seo_token_ntk")]
        public string SeoTokenNtk { get; set; }

        [JsonProperty("designerName")]
        public string DesignerName { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("buyable")]
        public bool Buyable { get; set; }

        [JsonProperty("designerIdentifier")]
        public string DesignerIdentifier { get; set; }

        [JsonProperty("images")]
        public Image[] Images { get; set; }

        [JsonProperty("seo")]
        public Seo Seo { get; set; }

        [JsonProperty("attributes")]
        public Attribute[] Attributes { get; set; }

        [JsonProperty("mfPartNumber")]
        public string MfPartNumber { get; set; }

        [JsonProperty("partNumber")]
        public string PartNumber { get; set; }

        public Data.Product ToEntity => new Data.Product {
            Brand = DesignerNameEn,
            Category = Data.Category.OutnetCoats,
            Id = ProductId,
            Image = Thumbnail,
            Images = Images
                .Where(p => p.Size.Width >= 1920)
                .GroupBy(p => p.View)
                .Select(i => "https:" + i.First().Url).ToArray(),
            Link = $"https://www.theoutnet.com/en-au/shop/product{Seo.SeoUrlKeyword}",
            Name = Name,
            Price = Price.WasPrice.Amount / Price.WasPrice.Divisor,
            SalePrice = Price.SellingPrice.Amount / Price.SellingPrice.Divisor,
            Savings = Price.WasPrice.Amount / Price.WasPrice.Divisor - Price.SellingPrice.Amount / Price.SellingPrice.Divisor,
        };
    }

    public partial class Attribute
    {
        [JsonProperty("values")]
        public Value[] Values { get; set; }

        [JsonProperty("usage")]
        public string Usage { get; set; }

        [JsonProperty("label")]
        public string Label { get; set; }

        [JsonProperty("identifier")]
        public string Identifier { get; set; }
    }

    public partial class Value
    {
        [JsonProperty("label")]
        public string Label { get; set; }

        [JsonProperty("identifier")]
        public string Identifier { get; set; }
    }

    public partial class Badge
    {
        [JsonProperty("label")]
        public string Label { get; set; }

        [JsonProperty("type", NullValueHandling = NullValueHandling.Ignore)]
        public string Type { get; set; }

        [JsonProperty("key")]
        public string Key { get; set; }
    }

    public partial class Image
    {
        [JsonProperty("view")]
        public string View { get; set; }

        [JsonProperty("url")]
        public string Url { get; set; }

        [JsonProperty("size")]
        public Size Size { get; set; }
    }

    public partial class Size
    {
        [JsonProperty("height")]
        public long Height { get; set; }

        [JsonProperty("width")]
        public long Width { get; set; }
    }

    public partial class MasterCategory
    {
        [JsonProperty("child", NullValueHandling = NullValueHandling.Ignore)]
        public MasterCategory Child { get; set; }

        [JsonProperty("categoryId")]
        public string CategoryId { get; set; }

        [JsonProperty("label")]
        public string Label { get; set; }

        [JsonProperty("identifier")]
        public string Identifier { get; set; }
    }

    public partial class OutnetProductPrice
    {
        [JsonProperty("sellingPrice")]
        public Discount SellingPrice { get; set; }

        [JsonProperty("rdSellingPrice")]
        public Discount RdSellingPrice { get; set; }

        [JsonProperty("rdWasPrice", NullValueHandling = NullValueHandling.Ignore)]
        public Discount RdWasPrice { get; set; }

        [JsonProperty("wasPrice", NullValueHandling = NullValueHandling.Ignore)]
        public Discount WasPrice { get; set; }

        [JsonProperty("rdDiscount", NullValueHandling = NullValueHandling.Ignore)]
        public Discount RdDiscount { get; set; }

        [JsonProperty("currency")]
        public Currency Currency { get; set; }

        [JsonProperty("discount", NullValueHandling = NullValueHandling.Ignore)]
        public Discount Discount { get; set; }
    }

    public partial class Currency
    {
        [JsonProperty("symbol")]
        public string Symbol { get; set; }

        [JsonProperty("label")]
        public string Label { get; set; }
    }

    public partial class Discount
    {
        [JsonProperty("amount")]
        public long Amount { get; set; }

        [JsonProperty("divisor")]
        public long Divisor { get; set; }
    }

    public partial class ProductColour
    {
        [JsonProperty("legacyId")]
        public object LegacyId { get; set; }

        [JsonProperty("visible")]
        public bool Visible { get; set; }

        [JsonProperty("imageViews")]
        public string[] ImageViews { get; set; }

        [JsonProperty("label")]
        public string Label { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }

        [JsonProperty("productId")]
        public string ProductId { get; set; }

        [JsonProperty("badges", NullValueHandling = NullValueHandling.Ignore)]
        public Badge[] Badges { get; set; }

        [JsonProperty("selected")]
        public bool Selected { get; set; }

        [JsonProperty("price")]
        public ProductColourPrice Price { get; set; }

        [JsonProperty("imageTemplate")]
        public string ImageTemplate { get; set; }

        [JsonProperty("buyable")]
        public bool Buyable { get; set; }

        [JsonProperty("mfPartNumber")]
        public string MfPartNumber { get; set; }

        [JsonProperty("identifier")]
        public string Identifier { get; set; }

        [JsonProperty("partNumber")]
        public string PartNumber { get; set; }
    }

    public partial class ProductColourPrice
    {
        [JsonProperty("sellingPrice")]
        public Discount SellingPrice { get; set; }

        [JsonProperty("rdSellingPrice")]
        public Discount RdSellingPrice { get; set; }

        [JsonProperty("currency")]
        public Currency Currency { get; set; }
    }

    public partial class Seo
    {
        [JsonProperty("seoURLKeyword")]
        public string SeoUrlKeyword { get; set; }
    }

    public partial class OutnetProduct
    {
        public static OutnetProduct[] FromJson(string json) => JsonConvert.DeserializeObject<OutnetProduct[]>(json, coach_bags_selenium.Outnet.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this OutnetProduct[] self) => JsonConvert.SerializeObject(self, coach_bags_selenium.Outnet.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
