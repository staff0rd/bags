// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using coach_bags_selenium.Ferragamo;
//
//    var ferragamoProducts = FerragamoProducts.FromJson(jsonString);

namespace coach_bags_selenium.Ferragamo
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using System.Linq;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class FerragamoProducts
    {
        [JsonProperty("recordSetTotal")]
        public long RecordSetTotal { get; set; }

        [JsonProperty("recordSetCount")]
        public long RecordSetCount { get; set; }

        [JsonProperty("facets")]
        public Facet[] Facets { get; set; }

        [JsonProperty("isNotValidFacetsCombination")]
        public bool IsNotValidFacetsCombination { get; set; }

        [JsonProperty("digital-contents")]
        public DigitalContents DigitalContents { get; set; }

        [JsonProperty("products")]
        public Product[] Products { get; set; }
    }

    public partial class DigitalContents
    {
        [JsonProperty("categoryName")]
        public string CategoryName { get; set; }

        [JsonProperty("editorialGridPLBlocks")]
        public object[] EditorialGridPlBlocks { get; set; }

        [JsonProperty("categoryId")]
        public string CategoryId { get; set; }
    }

    public partial class Facet
    {
        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("values", NullValueHandling = NullValueHandling.Ignore)]
        public Facet[] Values { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("value")]
        public string Value { get; set; }

        [JsonProperty("count", NullValueHandling = NullValueHandling.Ignore)]
        public long? Count { get; set; }
    }

    public partial class Product
    {
        [JsonProperty("isExclusive")]
        public bool IsExclusive { get; set; }

        [JsonProperty("keyword")]
        public string Keyword { get; set; }

        [JsonProperty("uniqueID")]
        public string UniqueId { get; set; }

        [JsonProperty("seoSegment")]
        public string SeoSegment { get; set; }

        [JsonProperty("parentCategoryID")]
        public string ParentCategoryId { get; set; }

        [JsonProperty("url")]
        public string Url { get; set; }

        [JsonProperty("image2")]
        public Uri Image2 { get; set; }

        [JsonProperty("image1")]
        public Uri Image1 { get; set; }

        [JsonProperty("shortDescription")]
        public string ShortDescription { get; set; }

        [JsonProperty("sequence")]
        public string Sequence { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("longDescription")]
        public string LongDescription { get; set; }

        [JsonProperty("buyable")]
        public bool Buyable { get; set; }

        [JsonProperty("prices")]
        public Price[] Prices { get; set; }

        [JsonProperty("storeID")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long StoreId { get; set; }

        [JsonProperty("partNumber")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long PartNumber { get; set; }

        public coach_bags_selenium.Data.Product AsEntity(Data.ProductCategory category) => new Data.Product
        {
            Link = "https://www.ferragamo.com" + Url,
            Name = Name,
            Brand = "Salvatore Ferragamo",
            CategoryId = category.Id,
            SalePrice = Prices.Last().PricePrice,
            Price = Prices.Last().PricePrice,
            Savings = 0,
            Id = UniqueId,
            Image = Image1.ToString(),
        };
    }

    public partial class Price
    {
        [JsonProperty("startDate")]
        public DateTimeOffset StartDate { get; set; }

        [JsonProperty("price")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long PricePrice { get; set; }

        [JsonProperty("originalPrice")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long OriginalPrice { get; set; }

        [JsonProperty("formattedPrice")]
        public string FormattedPrice { get; set; }

        [JsonProperty("precedence")]
        public string Precedence { get; set; }

        [JsonProperty("discountPercentage")]
        public string DiscountPercentage { get; set; }

        [JsonProperty("type")]
        public string Type { get; set; }
    }

    public partial class FerragamoProducts
    {
        public static FerragamoProducts FromJson(string json) => JsonConvert.DeserializeObject<FerragamoProducts>(json, coach_bags_selenium.Ferragamo.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this FerragamoProducts self) => JsonConvert.SerializeObject(self, coach_bags_selenium.Ferragamo.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
